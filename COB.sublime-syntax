%YAML 1.2
---
name: COB
file_extensions:
  - cob
  - cobweb
version: 1
scope: source.cob
variables:
  non_raw_ident: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  # include a word boundary at the end to ensure all possible characters are consumed, to prevent catastrophic backtracking
  identifier: '(?:(?:{{non_raw_ident}})\b)'
  type_identifier: '\b(?:_*[[:upper:]][[:alnum:]_]*)\b'
  constant: '\$(?:{{identifier}}::)*{{identifier}}'
  constant_instruction: '\$(?:{{identifier}}::)*{{type_identifier}}'
contexts:
  main:
    - include: ignored
    - include: sections

  ignored:
    - include: comments
    # All valid characters.
    - match: "[^A-Za-z0-9_ \r\n;,\\{\\}\\[\\]\\(\\)<>\\-+=$#@!%*?^\\:\\\\/.\"']"
      scope: invalid.illegal.char.cob
  comments:
    - match: '/\*'
      scope: punctuation.definition.comment.cob
      push:
        - meta_scope: comment.block.cob
        - include: block_comment
    - match: (//).*$\n?
      scope: comment.line.double-slash.cob
      captures:
        1: punctuation.definition.comment.cob
  block_comment:
    - match: '\*/'
      pop: true
    - match: '/\*'
      push: block_comment

  sections:
    - include: manifest_section
    - include: import_section
    - include: defs_section
    - include: commands_section
    - include: scenes_section

  manifest_section:
    - match: '^#manifest\b'
      scope: keyword.other.cob
      set:
        - include: ignored
        - include: import_self
        - include: as_alias
        - include: string
        - include: sections

  import_section:
    - match: '^#import\b'
      scope: keyword.other.cob
      set:
        - include: ignored
        - include: as_alias
        - include: string
        - include: sections

  defs_section:
    - match: '^#defs\b'
      scope: keyword.other.cob
      set:
        - include: ignored
        - include: defs_section-constant
        - include: defs_section-scene_macro
        - include: sections
  defs_section-constant:
    - match: '(?:\$)?{{constant}}'
      scope: variable.parameter.cob
      push:
        - include: ignored
        - match: '=\s*'
          scope: keyword.operator.cob
          set: pastable_value
  defs_section-scene_macro:
    - match: '(\+{{identifier}})'
      captures:
        1: entity.name.cob
        2: punctuation.section.group.begin.cob
      push:
        - match: '\s*(=)\s*'
          scope: keyword.operator.cob
          set: scene_macro_content-single

  commands_section:
    - match: '^#commands\b'
      scope: keyword.other.cob
      push:
        - include: ignored
        - include: struct_value
        - include: sections

  scenes_section:
    - match: '^#scenes\b'
      scope: keyword.other.cob
      set: scenes_section-scene
  scenes_section-scene:
    - include: ignored
    - include: string
    - include: macro_scene_call
    - include: struct_value



  pastable_value:
    - include: ignored
    - match: '\s*'
    - include: value_group-single
    - include: struct_value-single
    - include: map_value-single
    - include: array_value-single
    - include: tuple_value-single
    - include: constants-single
    - include: values
    - match: ''
      pop: true

  macro_scene_call:
    - match: '\+(?:{{identifier}}::)*{{identifier}}'
      scope: support.macro.cob
      push: macro_scene_call-inner
  macro_scene_call-inner:
    - match: '\s*'
      scope: invalid.illegal.cob
    - match: '\{'
      set:
        - include: ignored
        - include: string
        - include: macro_scene_call
        - include: struct_value
        # Don't include tuple_value, because tuples can't be placed anywhere.
        - match: '\{'
          scope: invalid.illegal.cob
        - match: '\}'
          pop: true

  scene_macro_content-single:
    - match: '\\'
      scope: punctuation.section.block.begin.cob
      set: scene_macro_content-inner
  scene_macro_content:
    - match: '\\'
      scope: punctuation.section.block.begin.cob
      push: scene_macro_content-inner
  scene_macro_content-inner:
    - match: '\\'
      scope: punctuation.section.block.end.cob
      pop: true
    - include: ignored
    - include: string
    - include: macro_scene_call
    - include: struct_value

  value_group-single:
    - match: '\\'
      scope: punctuation.section.block.begin.cob
      set: value_group-inner
  value_group:
    - match: '\\'
      scope: punctuation.section.block.begin.cob
      push: value_group-inner
  value_group-inner:
    - match: '\\'
      scope: punctuation.section.block.end.cob
      pop: true
    - include: ignored
    - include: macro_scene_call
    - include: struct_value
    - include: map_value
    - include: array_value
    - include: type_identifiers
    - include: field_identifiers
    - include: constants
    - include: values
    # Don't include tuple_value here, because tuples are not valid when standing alone inside things.
    - match: '\('
      scope: invalid.illegal.cob

  struct_value-single:
    - match: '{{type_identifier}}'
      scope: storage.type.cob
      set: struct_value-inner
  struct_value:
    - match: '{{type_identifier}}'
      scope: storage.type.cob
      push: struct_value-inner
  struct_value-inner:
    - include: generic_struct_args
    - include: ignored
    # Note: Whitespace after struct identifiers is illegal.
    - include: map_value-single
    - include: array_value-single  # Note: arrays have type names when they resolve to a tuple of vec e.g. Fonts(Vec<String>).
    - include: tuple_value-single  # Only valid use of tuples is after a struct identifier.
    - match: ''  # For structs with no content.
      pop: true
  generic_struct_args:
    - match: '<'
      push:
        - include: ignored
        - include: generic_struct_args
        - include: type_identifiers
        - include: lang_types
        - match: '>'
          pop: true

  map_value-single:
    - match: '\{'
      scope: punctuation.section.block.begin.cob
      set: map_value-inner
  map_value:
    - match: '\{'
      scope: punctuation.section.block.begin.cob
      push: map_value-inner
  map_value-inner:
    - match: '\}'
      scope: punctuation.section.block.end.cob
      pop: true
    - include: ignored
    - include: struct_value
    - include: map_value
    - include: array_value
    - include: tuple_value
    - include: type_identifiers
    - include: field_identifiers
    - include: constants
    - include: values

  array_value-single:
    - match: '\['
      scope: punctuation.section.array.begin.cob
      set: array_value-inner
  array_value:
    - match: '\['
      scope: punctuation.section.array.begin.cob
      push: array_value-inner
  array_value-inner:
    - match: '\]'
      scope: punctuation.section.array.end.cob
      pop: true
    - include: ignored
    - include: struct_value
    - include: map_value
    - include: array_value
    - include: tuple_value
    - include: type_identifiers
    - include: constants
    - include: values

  tuple_value-single:
    - match: '\('
      scope: punctuation.section.array.begin.cob
      set: tuple_value-inner
  tuple_value:
    - match: '\('
      scope: punctuation.section.array.begin.cob
      push: tuple_value-inner
  tuple_value-inner:
    - match: '\)'
      scope: punctuation.section.array.end.cob
      pop: true
    - include: ignored
    - include: struct_value
    - include: map_value
    - include: array_value
    - include: tuple_value
    - include: type_identifiers
    - include: constants
    - include: values

  constants-single:
    - match: '{{constant}}'
      scope: variable.parameter.cob
      pop: true
  constants:
    - match: '{{constant}}'
      scope: variable.parameter.cob


  type_identifiers:
    - match: '{{type_identifier}}'
      scope: storage.type.cob

  field_identifiers:
    - match: '{{identifier}}\s*:'

  import_self:
    - match: \b(self)\b
      scope: variable.language.cob

  as_alias:
    - match: \b(as)\b
      scope: keyword.operator.cob



  values:
    - include: lang_constant
    - include: number
    - include: color_literal
    - include: string
  lang_constant:
    - match: \b(true|false|none|auto|nan|inf)\b
      scope: constant.language.cob
  lang_types: # Only usable in instruction generics.
    - match: \b(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize|bool|char)\b
      scope: storage.type.rust
  number:
    # adapted from RON
    # handles integer and decimal numbers, with bonus 'px' and '%' notation for Val::Px and Val::Percent
    - match: |-
        (?x:         # turn on extended mode
          -?         # an optional minus
          (?:
            0        # a zero
            |        # ...or...
            [1-9]    # a 1-9 character
            \d*      # followed by zero or more digits
          )
          (?:
            (?:
              \.     # a period
              \d+    # followed by one or more digits
            )?
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
          (?:
            px|%|vw|vh|vmin|vmax|fr     # CUSTOM: Val/GridVal notation
          )?
        )
      scope: constant.numeric.cob
  color_literal:
    - match: '(?:#\h{6}(\h{2})?)'
      scope: constant.other.cob
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.cob
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.cob
        - match: '"'
          scope: punctuation.definition.string.end.cob
          pop: true
        - include: string-escape
        - include: line-continuation
  string-escape:
    # from RON
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            {[0-9a-fA-F]{1,6}}  # and one to six hex digits
          )
        )
      scope: constant.character.escape.cob
    - match: '\\u\{[^}]*\}'
      scope: invalid.illegal.character.escape.cob
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.cob
  line-continuation:
    - match: '\\$\n'
      scope: constant.character.escape.cob
    - match: '$\n'
      scope: invalid.illegal.unclosed-string.json
